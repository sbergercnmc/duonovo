#!/bin/bash#SBATCH --job-name=calculate_avg_readlength#SBATCH --output=%x_%j.out#SBATCH --error=%x_%j.err#SBATCH --time=10:00:00#SBATCH --mem=300G#SBATCH --cpus-per-task=10#SBATCH --array=1-16module load samtoolsBASE_DIR="/scratch/PMGRC_LRdata/trios/data"OUTPUT_DIR="/home/lboukas/PMGRC_longread/duo/vcfs/avg_readlength"mkdir -p "$OUTPUT_DIR"declare -a subdirs=(  "PMGRC-107-107-0" "PMGRC-323-323-0" "PMGRC-5-5-0"  "PMGRC-191-191-0" "PMGRC-615-615-0"  "PMGRC-291-291-0" "PMGRC-351-351-0" "PMGRC-645-645-0"  "PMGRC-296-296-0" "PMGRC-372-372-0" "PMGRC-482-482-0" "PMGRC-661-661-0"  "PMGRC-320-320-0" "PMGRC-417-417-0" "PMGRC-522-522-0" "PMGRC-770-770-0")current_dir=${subdirs[$SLURM_ARRAY_TASK_ID-1]}samples=("father.longread.bam" "mother.longread.bam" "proband.longread.bam")output_file="${OUTPUT_DIR}/${current_dir}_avg_readlength.tsv"#write header to output fileecho -e "Sample\tAverage Read Length" > "$output_file"#function that calculates average read length excluding supplementary and secondary alignmentscalculate_avg_readlength() {  local bam_file="$1"  samtools stats -@ "$SLURM_CPUS_PER_TASK" "$bam_file" | \  grep ^SN | cut -f 2- | \  awk -F'\t' '$1 == "average length:" {print $2}'}#process each sample in the current directoryfor sample in "${samples[@]}"; dobam_path="${BASE_DIR}/${current_dir}/${sample}"if [ -f "$bam_path" ]; thenavg_readlength=$(calculate_avg_readlength "$bam_path")echo -e "${sample}\t${avg_readlength}" >> "$output_file"echo "Processed: $bam_path"else  echo "File not found: $bam_path" >&2fidoneecho "Results for ${current_dir} saved to $output_file"#combine results from all tasks when the last task finishesif [ "$SLURM_ARRAY_TASK_ID" -eq "${#subdirs[@]}" ]; thencombined_output="${OUTPUT_DIR}/combined_avg_readlength_results.tsv"echo -e "Directory\tSample\tAverage Read Length" > "$combined_output"for dir in "${subdirs[@]}"; dodir_file="${OUTPUT_DIR}/${dir}_avg_readlength.tsv"if [ -f "$dir_file" ]; thensed '1d' "$dir_file" | sed "s/^/${dir}\t/" >> "$combined_output"fidoneecho "Combined results saved to $combined_output"fi